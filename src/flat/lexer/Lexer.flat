package flat/lexer

import flat/io/File
import flat/log/Logger

import flat/extensions/SyntaxStringFunctions

class {
  let static Logger log = Logger(Lexer.class)
  let static Char[] STATEMENT_END_CHARS = ['\n', '.', ';', '{', '}', '[', ']', '(', ')', '/', '*', '%', '=', ' ', ':']

  public async lex(File file) => LexResult() {
    external {
      let resolve;
      let reject;

      const promise = new Promise((res, rej) => {
        resolve = res;
        reject = rej;
      });
    }

    let result = LexResult(Array())

    let stream = file
      .createReadStream()
      .on<String>("data", (data) => {
        Lexer.log.trace("Received data from Stream \"#{file.nativeLocation}\" with count: #{data.count}")
        let chunkResult = lexChunk(data)
        result.lexemes.addAll(chunkResult.lexemes)
      })
      .on<String>("error", (error) => {
        Lexer.log.trace("Received error from Stream \"#{file.nativeLocation}\" with count: #{error.count}")
        external {
          reject(#{Exception(error)});
        }
      })
      .on("close", {
        Lexer.log.trace("Stream \"#{file.nativeLocation}\" closed")
        external {
          resolve(#{result});
        }
      })

    external {
      return promise;
    }
  }

  public lex(String contents) => LexResult() {
    return lexChunk(contents)
  }

  lexChunk(String contents) => LexResult() {
    var Int prevIndex = -1
    var Int index = contents.findCharOnTopLevel(STATEMENT_END_CHARS)

    var Int lineNumber = 1
    var Int column = 1

    let lexemes = Array<Lexeme>()

    while (index != -1) {
      let lexeme = createLexeme(contents, index, prevIndex, lineNumber, column)

      lexemes.add(lexeme)

      column += index - prevIndex
      lineNumber += lexeme.value.howMany('\n')

      let char = contents[index]

      match char {
        '\n' => {
          lineNumber++
          column = 1
        }
      }

      prevIndex = index
      index = contents.findCharOnTopLevel(STATEMENT_END_CHARS, start: index + 1)
    }

    let remainder = createLexeme(contents, index, prevIndex, lineNumber, column)

    if (remainder) {
      lexemes.add(remainder)
    }

    return LexResult(lexemes)
  }

  createLexeme(
    String contents,
    Int index,
    Int prevIndex,
    Int lineNumber,
    Int column
  ) -> Lexeme => null {
    let value = contents.substring(prevIndex + 1, index == -1 ? contents.count : index)
    let trimmedStart = value.trimStart()
    let trimmed = trimmedStart.trimEnd()
    let buffer = contents.substring(prevIndex, prevIndex + 1 + (value.count - trimmedStart.count))

    if (value.count > 0 || buffer.count > 0) {
      return Lexeme(
        buffer: buffer,
        value: trimmed,
        location: Lexeme.Location(
          lineNumber: lineNumber,
          column: column
        )
      )
    }
  }
}
