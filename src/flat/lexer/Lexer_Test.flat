package flat/lexer

import flat/lexer/Lexer

import static flat/lexer/TestUtils_Test.TestUtils

testable class {
  async test `can lex basic package statement with location info`() {
    let value = Lexer.consumeLexemeStream(
      Lexer().lex("|
        package flat/lexer
        |")
    )

    let expected = [
      Lexeme(
        value: "package",
        buffer: "",
        location: Lexeme.Location(
          lineNumber: 1,
          column: 1
        )
      ),
      Lexeme(
        value: "flat",
        buffer: " ",
        location: Lexeme.Location(
          lineNumber: 1,
          column: 9
        )
      ),
      Lexeme(
        value: "lexer",
        buffer: "/",
        location: Lexeme.Location(
          lineNumber: 1,
          column: 14
        )
      )
    ]

    expectLexemes(value.lexemes, expected, checkLocation: true)
  }

  async test `can lex basic package statement and import statement with location info`() {
    let value = Lexer.consumeLexemeStream(
      Lexer().lex("|
        package flat/lexer

        import flat/lexer/Lexer
        |")
    )

    let Lexeme[] expected = [
      Lexeme(
        value: "package",
        buffer: "",
        location: Lexeme.Location(
          lineNumber: 1,
          column: 1
        )
      ),
      Lexeme(
        value: "flat",
        buffer: " ",
        location: Lexeme.Location(
          lineNumber: 1,
          column: 9
        )
      ),
      Lexeme(
        value: "lexer",
        buffer: "/",
        location: Lexeme.Location(
          lineNumber: 1,
          column: 14
        )
      ),
      Lexeme(
        value: "",
        buffer: "\n",
        location: Lexeme.Location(
          lineNumber: 2,
          column: 1
        )
      ),
      Lexeme(
        value: "import",
        buffer: "\n",
        location: Lexeme.Location(
          lineNumber: 3,
          column: 1
        )
      ),
      Lexeme(
        value: "flat",
        buffer: " ",
        location: Lexeme.Location(
          lineNumber: 3,
          column: 8
        )
      ),
      Lexeme(
        value: "lexer",
        buffer: "/",
        location: Lexeme.Location(
          lineNumber: 3,
          column: 13
        )
      ),
      Lexeme(
        value: "Lexer",
        buffer: "/",
        location: Lexeme.Location(
          lineNumber: 3,
          column: 19
        )
      )
    ]

    expectLexemes(value.lexemes, expected, checkLocation: true)
  }

  async test `can lex function call`() {
    let value = Lexer.consumeLexemeStream(
      Lexer().lex("|
        parse(ParseRequest(sourceCode: test), value)
        |")
    )

    let Lexeme[] expected = [
      Lexeme(value: "parse", buffer: ""),
      Lexeme(value: "ParseRequest", buffer: "("),
      Lexeme(value: "sourceCode", buffer: "("),
      Lexeme(value: "", buffer: ":"),
      Lexeme(value: "test", buffer: " "),
      Lexeme(value: ",", buffer: ")"),
      Lexeme(value: "value", buffer: " "),
      Lexeme(value: "", buffer: ")")
    ]

    expectLexemes(value.lexemes, expected)
  }
}
